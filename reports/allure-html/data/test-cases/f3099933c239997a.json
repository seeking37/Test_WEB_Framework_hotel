{"uid":"f3099933c239997a","name":"输入验证测试","fullName":"testcase.test_reserve.TestReserveParameterized#test_input_validation","historyId":"ac82e3d748d1d926da419cb56b3cdc54","time":{"start":1751191720821,"stop":1751191721776,"duration":955},"description":"测试输入验证","descriptionHtml":"<p>测试输入验证</p>\n","status":"failed","statusMessage":"AssertionError: reserve_date 错误消息不匹配\nassert '' == 'Please enter a valid value.'\n  - Please enter a valid value.","statusTrace":"self = <testcase.test_reserve.TestReserveParameterized object at 0x0000025190D95970>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\ntest_case = {'description': '字符串类型无效值应显示错误', 'expected_messages': {'head_count': None, 'reserve_date': 'Please enter a valid value.', 'reserve_term': None}, 'head_count': 'a', 'id': 'invalid_string_values', ...}\n\n    @allure.story(\"输入验证\")\n    @allure.title(\"输入验证测试\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/reserve_cases.yaml', 'input_validation_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(2)\n    def test_input_validation(self, driver, test_case):\n        \"\"\"测试输入验证\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            # 设置为未登录用户场景\n            test_case_setup = {'is_logged_in': False, 'plan_title': test_case['plan_title']}\n            reserve_page = self._setup_reserve_page(test_case_setup)\n    \n            # 处理特殊日期标记\n            reserve_date = self._get_formatted_date(test_case['reserve_date'])\n    \n            # 设置输入值\n            reserve_page.set_reserve_date(reserve_date)\n            reserve_page.set_reserve_term(test_case['reserve_term'])\n            reserve_page.set_head_count(test_case['head_count'])\n            reserve_page.set_username(test_case['username'])  # 移动焦点\n    \n            # 验证错误消息\n            with allure.step(\"验证错误消息\"):\n                for field_name, expected_msg in test_case['expected_messages'].items():\n                    method_name = f\"get_{field_name}_message\"\n                    actual_msg = getattr(reserve_page, method_name)()\n                    if expected_msg is not None:\n>                       assert actual_msg == expected_msg, f\"{field_name} 错误消息不匹配\"\nE                       AssertionError: reserve_date 错误消息不匹配\nE                       assert '' == 'Please enter a valid value.'\nE                         - Please enter a valid value.\n\ntestcase\\test_reserve.py:169: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751191710302,"stop":1751191711917,"duration":1615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"clear_cookies","time":{"start":1751191720792,"stop":1751191720793,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_driver","time":{"start":1751191720793,"stop":1751191720820,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestReserveParameterized","time":{"start":1751191720793,"stop":1751191720793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"测试输入验证","status":"failed","statusMessage":"AssertionError: reserve_date 错误消息不匹配\nassert '' == 'Please enter a valid value.'\n  - Please enter a valid value.","statusTrace":"self = <testcase.test_reserve.TestReserveParameterized object at 0x0000025190D95970>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\ntest_case = {'description': '字符串类型无效值应显示错误', 'expected_messages': {'head_count': None, 'reserve_date': 'Please enter a valid value.', 'reserve_term': None}, 'head_count': 'a', 'id': 'invalid_string_values', ...}\n\n    @allure.story(\"输入验证\")\n    @allure.title(\"输入验证测试\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/reserve_cases.yaml', 'input_validation_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(2)\n    def test_input_validation(self, driver, test_case):\n        \"\"\"测试输入验证\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            # 设置为未登录用户场景\n            test_case_setup = {'is_logged_in': False, 'plan_title': test_case['plan_title']}\n            reserve_page = self._setup_reserve_page(test_case_setup)\n    \n            # 处理特殊日期标记\n            reserve_date = self._get_formatted_date(test_case['reserve_date'])\n    \n            # 设置输入值\n            reserve_page.set_reserve_date(reserve_date)\n            reserve_page.set_reserve_term(test_case['reserve_term'])\n            reserve_page.set_head_count(test_case['head_count'])\n            reserve_page.set_username(test_case['username'])  # 移动焦点\n    \n            # 验证错误消息\n            with allure.step(\"验证错误消息\"):\n                for field_name, expected_msg in test_case['expected_messages'].items():\n                    method_name = f\"get_{field_name}_message\"\n                    actual_msg = getattr(reserve_page, method_name)()\n                    if expected_msg is not None:\n>                       assert actual_msg == expected_msg, f\"{field_name} 错误消息不匹配\"\nE                       AssertionError: reserve_date 错误消息不匹配\nE                       assert '' == 'Please enter a valid value.'\nE                         - Please enter a valid value.\n\ntestcase\\test_reserve.py:169: AssertionError","steps":[{"name":"执行测试用例: 字符串类型无效值应显示错误","time":{"start":1751191720821,"stop":1751191721776,"duration":955},"status":"failed","statusMessage":"AssertionError: reserve_date 错误消息不匹配\nassert '' == 'Please enter a valid value.'\n  - Please enter a valid value.\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_reserve.py\", line 169, in test_input_validation\n    assert actual_msg == expected_msg, f\"{field_name} 错误消息不匹配\"\n","steps":[{"name":"设置预订日期","time":{"start":1751191721516,"stop":1751191721635,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"date","value":"'12/3//345'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置预订天数","time":{"start":1751191721635,"stop":1751191721676,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"term","value":"'a'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置人数","time":{"start":1751191721676,"stop":1751191721719,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"head_count","value":"'a'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置用户名","time":{"start":1751191721719,"stop":1751191721768,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'the tester'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"验证错误消息","time":{"start":1751191721768,"stop":1751191721776,"duration":8},"status":"failed","statusMessage":"AssertionError: reserve_date 错误消息不匹配\nassert '' == 'Please enter a valid value.'\n  - Please enter a valid value.\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_reserve.py\", line 169, in test_input_validation\n    assert actual_msg == expected_msg, f\"{field_name} 错误消息不匹配\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":5,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":6,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestReserveParameterized::0","time":{"start":1751191721781,"stop":1751191721807,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"clear_cookies::0","time":{"start":1751191721808,"stop":1751191721814,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1751191738539,"stop":1751191740648,"duration":2109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"酒店预订功能（参数化）"},{"name":"story","value":"输入验证"},{"name":"tag","value":"order(2)"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_reserve"},{"name":"subSuite","value":"TestReserveParameterized"},{"name":"host","value":"SQG"},{"name":"thread","value":"19712-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_reserve"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'id': 'invalid_string_values', 'description': '字符串类型无效值应显示错误', 'plan_title': 'Plan with special offers', 'reserve_date': '12/3//345', 'reserve_term': 'a', 'head_count': 'a', 'username': 'the tester', 'expected_messages': {'reserve_date': 'Please enter a valid value.', 'reserve_term': None, 'head_count': None}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["order(2)"]},"source":"f3099933c239997a.json","parameterValues":["{'id': 'invalid_string_values', 'description': '字符串类型无效值应显示错误', 'plan_title': 'Plan with special offers', 'reserve_date': '12/3//345', 'reserve_term': 'a', 'head_count': 'a', 'username': 'the tester', 'expected_messages': {'reserve_date': 'Please enter a valid value.', 'reserve_term': None, 'head_count': None}}"]}