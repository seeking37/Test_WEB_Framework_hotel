{"uid":"12562628378dc677","name":"预订成功测试","fullName":"testcase.test_reserve.TestReserveParameterized#test_reserve_success","historyId":"764a73822a1b436f0e23f63ec22865b2","time":{"start":1751191726737,"stop":1751191738455,"duration":11718},"description":"测试预订成功","descriptionHtml":"<p>测试预订成功</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <testcase.test_reserve.TestReserveParameterized object at 0x0000025190D95F40>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\ntest_case = {'breakfast_plan': True, 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'contact_type': 'email', 'description': '已登录用户预订成功', ...}\n\n    @allure.story(\"预订成功\")\n    @allure.title(\"预订成功测试\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/reserve_cases.yaml', 'reserve_success_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(4)\n    def test_reserve_success(self, driver, test_case):\n        \"\"\"测试预订成功\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            reserve_page = self._setup_reserve_page(test_case)\n    \n            # 计算预期的日期和价格\n            if test_case['reserve_date'] == 'tomorrow':\n                expected_start = datetime.now() + timedelta(days=1)\n            elif test_case['reserve_date'] == 'after_90_days':\n                expected_start = datetime.now() + timedelta(days=90)\n            else:\n                expected_start = datetime.now() + timedelta(days=1)  # 默认明天\n    \n            expected_end = expected_start + timedelta(days=int(test_case['reserve_term']))\n            expected_term = f\"{self._format_long_date(expected_start)} - {self._format_long_date(expected_end)}. {test_case['reserve_term']} night(s)\"\n    \n            # 根据计划和星期几计算总金额\n            if test_case['plan_title'] == \"Plan with special offers\":\n                if expected_start.weekday() in [5, 6]:  # 周六日\n                    expected_total_bill = \"Total $87.50 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $70.00 (included taxes)\"\n            else:  # Premium plan\n                if expected_start.weekday() == 5:  # 周六\n                    expected_total_bill = \"Total $1,120.00 (included taxes)\"\n                elif expected_start.weekday() in [4, 6]:  # 周五或周日\n                    expected_total_bill = \"Total $1,020.00 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $920.00 (included taxes)\"\n    \n            # 根据测试类型设置不同的字段\n            if test_case['id'] == 'guest_user_success':\n                # 未登录用户测试：只设置用户名和联系方式（与Java版本一致）\n                reserve_page.set_username(test_case['username'])\n                reserve_page.set_contact(Contact.NO)\n            else:\n                # 已登录用户测试：按照Java版本的确切顺序设置所有字段\n                reserve_page.set_reserve_term(test_case['reserve_term'])\n                reserve_page.set_head_count(test_case['head_count'])\n    \n                # 设置额外服务\n                if test_case.get('breakfast_plan'):\n                    reserve_page.set_breakfast_plan(test_case['breakfast_plan'])\n                if test_case.get('early_check_in_plan'):\n                    reserve_page.set_early_check_in_plan(test_case['early_check_in_plan'])\n                if test_case.get('sightseeing_plan') is not None:\n                    reserve_page.set_sightseeing_plan(test_case['sightseeing_plan'])\n    \n                # 设置联系方式\n                if test_case['contact_type'] == 'email':\n                    reserve_page.set_contact(Contact.EMAIL)\n                    if test_case.get('email'):\n                        reserve_page.set_email(test_case['email'])\n                elif test_case['contact_type'] == 'tel':\n                    reserve_page.set_contact(Contact.TELEPHONE)\n                    if test_case.get('tel'):\n                        reserve_page.set_tel(test_case['tel'])\n                elif test_case['contact_type'] == 'no':\n                    reserve_page.set_contact(Contact.NO)\n    \n                # 设置备注\n                if test_case.get('comment'):\n                    reserve_page.set_comment(test_case['comment'])\n    \n                # 最后设置日期\n                reserve_page.set_reserve_date(self._get_formatted_date(test_case['reserve_date']))\n    \n            # 提交预订\n>           confirm_page = reserve_page.go_to_confirm_page()\n\ntestcase\\test_reserve.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\reserve_page.py:149: in go_to_confirm_page\n    return ConfirmPage(self.driver)\npages\\confirm_page.py:30: in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\npages\\base_page.py:18: in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\nmethod = <function title_contains.<locals>._predicate at 0x0000025190F3A660>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751191710302,"stop":1751191711917,"duration":1615},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_driver","time":{"start":1751191726695,"stop":1751191726737,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"clear_cookies","time":{"start":1751191726695,"stop":1751191726695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestReserveParameterized","time":{"start":1751191726695,"stop":1751191726695,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"测试预订成功","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <testcase.test_reserve.TestReserveParameterized object at 0x0000025190D95F40>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\ntest_case = {'breakfast_plan': True, 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'contact_type': 'email', 'description': '已登录用户预订成功', ...}\n\n    @allure.story(\"预订成功\")\n    @allure.title(\"预订成功测试\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/reserve_cases.yaml', 'reserve_success_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(4)\n    def test_reserve_success(self, driver, test_case):\n        \"\"\"测试预订成功\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            reserve_page = self._setup_reserve_page(test_case)\n    \n            # 计算预期的日期和价格\n            if test_case['reserve_date'] == 'tomorrow':\n                expected_start = datetime.now() + timedelta(days=1)\n            elif test_case['reserve_date'] == 'after_90_days':\n                expected_start = datetime.now() + timedelta(days=90)\n            else:\n                expected_start = datetime.now() + timedelta(days=1)  # 默认明天\n    \n            expected_end = expected_start + timedelta(days=int(test_case['reserve_term']))\n            expected_term = f\"{self._format_long_date(expected_start)} - {self._format_long_date(expected_end)}. {test_case['reserve_term']} night(s)\"\n    \n            # 根据计划和星期几计算总金额\n            if test_case['plan_title'] == \"Plan with special offers\":\n                if expected_start.weekday() in [5, 6]:  # 周六日\n                    expected_total_bill = \"Total $87.50 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $70.00 (included taxes)\"\n            else:  # Premium plan\n                if expected_start.weekday() == 5:  # 周六\n                    expected_total_bill = \"Total $1,120.00 (included taxes)\"\n                elif expected_start.weekday() in [4, 6]:  # 周五或周日\n                    expected_total_bill = \"Total $1,020.00 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $920.00 (included taxes)\"\n    \n            # 根据测试类型设置不同的字段\n            if test_case['id'] == 'guest_user_success':\n                # 未登录用户测试：只设置用户名和联系方式（与Java版本一致）\n                reserve_page.set_username(test_case['username'])\n                reserve_page.set_contact(Contact.NO)\n            else:\n                # 已登录用户测试：按照Java版本的确切顺序设置所有字段\n                reserve_page.set_reserve_term(test_case['reserve_term'])\n                reserve_page.set_head_count(test_case['head_count'])\n    \n                # 设置额外服务\n                if test_case.get('breakfast_plan'):\n                    reserve_page.set_breakfast_plan(test_case['breakfast_plan'])\n                if test_case.get('early_check_in_plan'):\n                    reserve_page.set_early_check_in_plan(test_case['early_check_in_plan'])\n                if test_case.get('sightseeing_plan') is not None:\n                    reserve_page.set_sightseeing_plan(test_case['sightseeing_plan'])\n    \n                # 设置联系方式\n                if test_case['contact_type'] == 'email':\n                    reserve_page.set_contact(Contact.EMAIL)\n                    if test_case.get('email'):\n                        reserve_page.set_email(test_case['email'])\n                elif test_case['contact_type'] == 'tel':\n                    reserve_page.set_contact(Contact.TELEPHONE)\n                    if test_case.get('tel'):\n                        reserve_page.set_tel(test_case['tel'])\n                elif test_case['contact_type'] == 'no':\n                    reserve_page.set_contact(Contact.NO)\n    \n                # 设置备注\n                if test_case.get('comment'):\n                    reserve_page.set_comment(test_case['comment'])\n    \n                # 最后设置日期\n                reserve_page.set_reserve_date(self._get_formatted_date(test_case['reserve_date']))\n    \n            # 提交预订\n>           confirm_page = reserve_page.go_to_confirm_page()\n\ntestcase\\test_reserve.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\reserve_page.py:149: in go_to_confirm_page\n    return ConfirmPage(self.driver)\npages\\confirm_page.py:30: in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\npages\\base_page.py:18: in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\nmethod = <function title_contains.<locals>._predicate at 0x0000025190F3A660>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException","steps":[{"name":"执行测试用例: 已登录用户预订成功","time":{"start":1751191726737,"stop":1751191738454,"duration":11717},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_reserve.py\", line 277, in test_reserve_success\n    confirm_page = reserve_page.go_to_confirm_page()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\reserve_page.py\", line 149, in go_to_confirm_page\n    return ConfirmPage(self.driver)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\confirm_page.py\", line 30, in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\base_page.py\", line 18, in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[{"name":"设置预订天数","time":{"start":1751191727841,"stop":1751191727889,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"term","value":"'2'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置人数","time":{"start":1751191727889,"stop":1751191727941,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"head_count","value":"'4'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置早餐计划","time":{"start":1751191727941,"stop":1751191727980,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"checked","value":"True"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置早入住计划","time":{"start":1751191727980,"stop":1751191728026,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"checked","value":"True"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置观光计划","time":{"start":1751191728026,"stop":1751191728037,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"checked","value":"False"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置联系方式","time":{"start":1751191728037,"stop":1751191728079,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"contact","value":"<Contact.EMAIL: 'email'>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置备注","time":{"start":1751191728079,"stop":1751191728143,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"comment","value":"'aaa\n\nbbbbbbb\ncc'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"设置预订日期","time":{"start":1751191728144,"stop":1751191728264,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"date","value":"'09/27/2025'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"跳转到确认页面","time":{"start":1751191728264,"stop":1751191738452,"duration":10188},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\reserve_page.py\", line 149, in go_to_confirm_page\n    return ConfirmPage(self.driver)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\confirm_page.py\", line 30, in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\base_page.py\", line 18, in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":9,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":10,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestReserveParameterized::0","time":{"start":1751191738479,"stop":1751191738521,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"clear_cookies::0","time":{"start":1751191738523,"stop":1751191738538,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1751191738539,"stop":1751191740648,"duration":2109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"酒店预订功能（参数化）"},{"name":"story","value":"预订成功"},{"name":"tag","value":"order(4)"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_reserve"},{"name":"subSuite","value":"TestReserveParameterized"},{"name":"host","value":"SQG"},{"name":"thread","value":"19712-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_reserve"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'id': 'logged_user_success', 'description': '已登录用户预订成功', 'is_logged_in': True, 'login_email': 'clark@example.com', 'login_password': 'password', 'plan_title': 'Premium plan', 'username': '', 'contact_type': 'email', 'email': '', 'tel': '', 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'reserve_date': 'after_90_days', 'reserve_term': '2', 'head_count': '4', 'breakfast_plan': True, 'early_check_in_plan': True, 'sightseeing_plan': False, 'expected_plan_name': 'Premium plan', 'expected_head_count': '4 person(s)', 'expected_plans_contain': ['Breakfast', 'Early check-in'], 'expected_plans_not_contain': ['Sightseeing'], 'expected_username': 'Clark Evans', 'expected_contact': 'Email: clark@example.com', 'expected_comment': 'aaa\\n\\nbbbbbbb\\ncc', 'expected_modal_message': 'We look forward to visiting you.'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["order(4)"]},"source":"12562628378dc677.json","parameterValues":["{'id': 'logged_user_success', 'description': '已登录用户预订成功', 'is_logged_in': True, 'login_email': 'clark@example.com', 'login_password': 'password', 'plan_title': 'Premium plan', 'username': '', 'contact_type': 'email', 'email': '', 'tel': '', 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'reserve_date': 'after_90_days', 'reserve_term': '2', 'head_count': '4', 'breakfast_plan': True, 'early_check_in_plan': True, 'sightseeing_plan': False, 'expected_plan_name': 'Premium plan', 'expected_head_count': '4 person(s)', 'expected_plans_contain': ['Breakfast', 'Early check-in'], 'expected_plans_not_contain': ['Sightseeing'], 'expected_username': 'Clark Evans', 'expected_contact': 'Email: clark@example.com', 'expected_comment': 'aaa\\n\\nbbbbbbb\\ncc', 'expected_modal_message': 'We look forward to visiting you.'}"]}