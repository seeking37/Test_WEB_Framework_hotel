{"uid":"9f1ac87e76e12d65","name":"test_icon_settings[icon_success]","fullName":"testcase.test_mypage.TestMyPageParameterized#test_icon_settings","historyId":"6f4a44afed5658bdcaa7946905e66af3","time":{"start":1751190854124,"stop":1751190855143,"duration":1019},"description":"测试图标设置功能","descriptionHtml":"<p>测试图标设置功能</p>\n","status":"failed","statusMessage":"AssertionError: assert 71 == 70\n +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\n +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width","statusTrace":"self = <testcase.test_mypage.TestMyPageParameterized object at 0x00000235FEACF740>\ntest_case = {'description': '成功设置图标', 'expected_results': {'border_color': 'black', 'image_exists': True, 'image_width': 70}, 'expected_success': True, 'icon_data': {'color': 'black', 'file_path': 'data/resources/240x240_01.png', 'zoom': 80}, ...}\n\n    @allure.story(\"图标设置\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/mypage_cases.yaml', 'icon_test_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(3)\n    def test_icon_settings(self, test_case):\n        \"\"\"测试图标设置功能\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            top_page = TopPage(self.driver)\n    \n            # 登录用户\n            login_data = test_case['login_data']\n            login_page = top_page.go_to_login_page()\n            my_page = login_page.do_login(login_data['email'], login_data['password'])\n            icon_page = my_page.go_to_icon_page()\n    \n            # 设置图标\n            icon_data = test_case['icon_data']\n            file_path = Path(icon_data['file_path'])\n            icon_page.set_icon(file_path)\n    \n            # 如果有zoom和color设置\n            if icon_data['zoom'] is not None:\n                icon_page.set_zoom(icon_data['zoom'])\n            if icon_data['color'] is not None:\n                icon_page.set_color(Color.from_string(icon_data['color']))\n    \n            # 验证结果\n            if test_case['expected_success']:\n                # 成功设置图标\n                my_page = icon_page.go_to_my_page()\n                expected_results = test_case['expected_results']\n    \n                with allure.step(\"验证图标设置成功\"):\n                    assert my_page.exists_icon_image() == expected_results['image_exists']\n>                   assert my_page.get_icon_image_width() == expected_results['image_width']\nE                   assert 71 == 70\nE                    +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\nE                    +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width\n\ntestcase\\test_mypage.py:138: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751190844640,"stop":1751190846219,"duration":1579},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_driver","time":{"start":1751190854107,"stop":1751190854123,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"clear_cookies","time":{"start":1751190854107,"stop":1751190854107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"测试图标设置功能","status":"failed","statusMessage":"AssertionError: assert 71 == 70\n +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\n +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width","statusTrace":"self = <testcase.test_mypage.TestMyPageParameterized object at 0x00000235FEACF740>\ntest_case = {'description': '成功设置图标', 'expected_results': {'border_color': 'black', 'image_exists': True, 'image_width': 70}, 'expected_success': True, 'icon_data': {'color': 'black', 'file_path': 'data/resources/240x240_01.png', 'zoom': 80}, ...}\n\n    @allure.story(\"图标设置\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/mypage_cases.yaml', 'icon_test_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(3)\n    def test_icon_settings(self, test_case):\n        \"\"\"测试图标设置功能\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            top_page = TopPage(self.driver)\n    \n            # 登录用户\n            login_data = test_case['login_data']\n            login_page = top_page.go_to_login_page()\n            my_page = login_page.do_login(login_data['email'], login_data['password'])\n            icon_page = my_page.go_to_icon_page()\n    \n            # 设置图标\n            icon_data = test_case['icon_data']\n            file_path = Path(icon_data['file_path'])\n            icon_page.set_icon(file_path)\n    \n            # 如果有zoom和color设置\n            if icon_data['zoom'] is not None:\n                icon_page.set_zoom(icon_data['zoom'])\n            if icon_data['color'] is not None:\n                icon_page.set_color(Color.from_string(icon_data['color']))\n    \n            # 验证结果\n            if test_case['expected_success']:\n                # 成功设置图标\n                my_page = icon_page.go_to_my_page()\n                expected_results = test_case['expected_results']\n    \n                with allure.step(\"验证图标设置成功\"):\n                    assert my_page.exists_icon_image() == expected_results['image_exists']\n>                   assert my_page.get_icon_image_width() == expected_results['image_width']\nE                   assert 71 == 70\nE                    +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\nE                    +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width\n\ntestcase\\test_mypage.py:138: AssertionError","steps":[{"name":"执行测试用例: 成功设置图标","time":{"start":1751190854124,"stop":1751190855142,"duration":1018},"status":"failed","statusMessage":"AssertionError: assert 71 == 70\n +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\n +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_mypage.py\", line 138, in test_icon_settings\n    assert my_page.get_icon_image_width() == expected_results['image_width']\n","steps":[{"name":"验证图标设置成功","time":{"start":1751190855122,"stop":1751190855142,"duration":20},"status":"failed","statusMessage":"AssertionError: assert 71 == 70\n +  where 71 = <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>>()\n +    where <bound method MyPage.get_icon_image_width of <pages.my_page.MyPage object at 0x00000235FEC34590>> = <pages.my_page.MyPage object at 0x00000235FEC34590>.get_icon_image_width\n","statusTrace":"  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_mypage.py\", line 138, in test_icon_settings\n    assert my_page.get_icon_image_width() == expected_results['image_width']\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":2,"hasContent":true},"afterStages":[{"name":"clear_cookies::0","time":{"start":1751190855227,"stop":1751190855233,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1751190856173,"stop":1751190858301,"duration":2128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"个人页面"},{"name":"story","value":"图标设置"},{"name":"tag","value":"order(3)"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_mypage"},{"name":"subSuite","value":"TestMyPageParameterized"},{"name":"host","value":"SQG"},{"name":"thread","value":"10800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_mypage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'id': 'icon_success', 'login_data': {'email': 'new-user@example.com', 'password': '11111111'}, 'icon_data': {'file_path': 'data/resources/240x240_01.png', 'zoom': 80, 'color': 'black'}, 'expected_success': True, 'expected_results': {'image_exists': True, 'image_width': 70, 'border_color': 'black'}, 'description': '成功设置图标'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["order(3)","@pytest.mark.usefixtures('driver')"]},"source":"9f1ac87e76e12d65.json","parameterValues":["{'id': 'icon_success', 'login_data': {'email': 'new-user@example.com', 'password': '11111111'}, 'icon_data': {'file_path': 'data/resources/240x240_01.png', 'zoom': 80, 'color': 'black'}, 'expected_success': True, 'expected_results': {'image_exists': True, 'image_width': 70, 'border_color': 'black'}, 'description': '成功设置图标'}"]}