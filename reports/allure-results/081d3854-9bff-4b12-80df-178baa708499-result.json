{"name": "预订成功测试", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testcase.test_reserve.TestReserveParameterized object at 0x0000025190D95F40>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\ntest_case = {'breakfast_plan': True, 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'contact_type': 'email', 'description': '已登录用户预订成功', ...}\n\n    @allure.story(\"预订成功\")\n    @allure.title(\"预订成功测试\")\n    @pytest.mark.parametrize(\"test_case\", Utils.get_test_cases('../data/reserve_cases.yaml', 'reserve_success_cases'), ids=lambda x: x['id'])\n    @pytest.mark.order(4)\n    def test_reserve_success(self, driver, test_case):\n        \"\"\"测试预订成功\"\"\"\n        with allure.step(f\"执行测试用例: {test_case['description']}\"):\n            reserve_page = self._setup_reserve_page(test_case)\n    \n            # 计算预期的日期和价格\n            if test_case['reserve_date'] == 'tomorrow':\n                expected_start = datetime.now() + timedelta(days=1)\n            elif test_case['reserve_date'] == 'after_90_days':\n                expected_start = datetime.now() + timedelta(days=90)\n            else:\n                expected_start = datetime.now() + timedelta(days=1)  # 默认明天\n    \n            expected_end = expected_start + timedelta(days=int(test_case['reserve_term']))\n            expected_term = f\"{self._format_long_date(expected_start)} - {self._format_long_date(expected_end)}. {test_case['reserve_term']} night(s)\"\n    \n            # 根据计划和星期几计算总金额\n            if test_case['plan_title'] == \"Plan with special offers\":\n                if expected_start.weekday() in [5, 6]:  # 周六日\n                    expected_total_bill = \"Total $87.50 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $70.00 (included taxes)\"\n            else:  # Premium plan\n                if expected_start.weekday() == 5:  # 周六\n                    expected_total_bill = \"Total $1,120.00 (included taxes)\"\n                elif expected_start.weekday() in [4, 6]:  # 周五或周日\n                    expected_total_bill = \"Total $1,020.00 (included taxes)\"\n                else:\n                    expected_total_bill = \"Total $920.00 (included taxes)\"\n    \n            # 根据测试类型设置不同的字段\n            if test_case['id'] == 'guest_user_success':\n                # 未登录用户测试：只设置用户名和联系方式（与Java版本一致）\n                reserve_page.set_username(test_case['username'])\n                reserve_page.set_contact(Contact.NO)\n            else:\n                # 已登录用户测试：按照Java版本的确切顺序设置所有字段\n                reserve_page.set_reserve_term(test_case['reserve_term'])\n                reserve_page.set_head_count(test_case['head_count'])\n    \n                # 设置额外服务\n                if test_case.get('breakfast_plan'):\n                    reserve_page.set_breakfast_plan(test_case['breakfast_plan'])\n                if test_case.get('early_check_in_plan'):\n                    reserve_page.set_early_check_in_plan(test_case['early_check_in_plan'])\n                if test_case.get('sightseeing_plan') is not None:\n                    reserve_page.set_sightseeing_plan(test_case['sightseeing_plan'])\n    \n                # 设置联系方式\n                if test_case['contact_type'] == 'email':\n                    reserve_page.set_contact(Contact.EMAIL)\n                    if test_case.get('email'):\n                        reserve_page.set_email(test_case['email'])\n                elif test_case['contact_type'] == 'tel':\n                    reserve_page.set_contact(Contact.TELEPHONE)\n                    if test_case.get('tel'):\n                        reserve_page.set_tel(test_case['tel'])\n                elif test_case['contact_type'] == 'no':\n                    reserve_page.set_contact(Contact.NO)\n    \n                # 设置备注\n                if test_case.get('comment'):\n                    reserve_page.set_comment(test_case['comment'])\n    \n                # 最后设置日期\n                reserve_page.set_reserve_date(self._get_formatted_date(test_case['reserve_date']))\n    \n            # 提交预订\n>           confirm_page = reserve_page.go_to_confirm_page()\n\ntestcase\\test_reserve.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\reserve_page.py:149: in go_to_confirm_page\n    return ConfirmPage(self.driver)\npages\\confirm_page.py:30: in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\npages\\base_page.py:18: in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6ccf126e12d53bab5df4fa0888f4f40a\")>\nmethod = <function title_contains.<locals>._predicate at 0x0000025190F3A660>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException"}, "description": "测试预订成功", "steps": [{"name": "执行测试用例: 已登录用户预订成功", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\tocode\\Project\\cursor\\hotel-example\\testcase\\test_reserve.py\", line 277, in test_reserve_success\n    confirm_page = reserve_page.go_to_confirm_page()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\reserve_page.py\", line 149, in go_to_confirm_page\n    return ConfirmPage(self.driver)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\confirm_page.py\", line 30, in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\base_page.py\", line 18, in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "steps": [{"name": "设置预订天数", "status": "passed", "parameters": [{"name": "term", "value": "'2'"}], "start": 1751191727841, "stop": 1751191727889}, {"name": "设置人数", "status": "passed", "parameters": [{"name": "head_count", "value": "'4'"}], "start": 1751191727889, "stop": 1751191727941}, {"name": "设置早餐计划", "status": "passed", "parameters": [{"name": "checked", "value": "True"}], "start": 1751191727941, "stop": 1751191727980}, {"name": "设置早入住计划", "status": "passed", "parameters": [{"name": "checked", "value": "True"}], "start": 1751191727980, "stop": 1751191728026}, {"name": "设置观光计划", "status": "passed", "parameters": [{"name": "checked", "value": "False"}], "start": 1751191728026, "stop": 1751191728037}, {"name": "设置联系方式", "status": "passed", "parameters": [{"name": "contact", "value": "<Contact.EMAIL: 'email'>"}], "start": 1751191728037, "stop": 1751191728079}, {"name": "设置备注", "status": "passed", "parameters": [{"name": "comment", "value": "'aaa\n\nbbbbbbb\ncc'"}], "start": 1751191728079, "stop": 1751191728143}, {"name": "设置预订日期", "status": "passed", "parameters": [{"name": "date", "value": "'09/27/2025'"}], "start": 1751191728144, "stop": 1751191728264}, {"name": "跳转到确认页面", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\reserve_page.py\", line 149, in go_to_confirm_page\n    return ConfirmPage(self.driver)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\confirm_page.py\", line 30, in __init__\n    self.wait_for_title_contains(\"Confirm Reservation\")\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\pages\\base_page.py\", line 18, in wait_for_title_contains\n    self.wait.until(EC.title_contains(title))\n  File \"C:\\tocode\\Project\\cursor\\hotel-example\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1751191728264, "stop": 1751191738452}], "start": 1751191726737, "stop": 1751191738454}], "parameters": [{"name": "test_case", "value": "{'id': 'logged_user_success', 'description': '已登录用户预订成功', 'is_logged_in': True, 'login_email': 'clark@example.com', 'login_password': 'password', 'plan_title': 'Premium plan', 'username': '', 'contact_type': 'email', 'email': '', 'tel': '', 'comment': 'aaa\\n\\nbbbbbbb\\ncc', 'reserve_date': 'after_90_days', 'reserve_term': '2', 'head_count': '4', 'breakfast_plan': True, 'early_check_in_plan': True, 'sightseeing_plan': False, 'expected_plan_name': 'Premium plan', 'expected_head_count': '4 person(s)', 'expected_plans_contain': ['Breakfast', 'Early check-in'], 'expected_plans_not_contain': ['Sightseeing'], 'expected_username': 'Clark Evans', 'expected_contact': 'Email: clark@example.com', 'expected_comment': 'aaa\\n\\nbbbbbbb\\ncc', 'expected_modal_message': 'We look forward to visiting you.'}"}], "start": 1751191726737, "stop": 1751191738455, "uuid": "708dc478-bef8-4009-aabf-2a221828d06b", "historyId": "764a73822a1b436f0e23f63ec22865b2", "testCaseId": "7bd3ed7aad4f7137220e10250cfb08d2", "fullName": "testcase.test_reserve.TestReserveParameterized#test_reserve_success", "labels": [{"name": "feature", "value": "酒店预订功能（参数化）"}, {"name": "story", "value": "预订成功"}, {"name": "tag", "value": "order(4)"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_reserve"}, {"name": "subSuite", "value": "TestReserveParameterized"}, {"name": "host", "value": "SQG"}, {"name": "thread", "value": "19712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_reserve"}]}